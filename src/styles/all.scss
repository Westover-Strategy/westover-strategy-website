// 1. Abstracts
// The `abstracts`-folder gathers SASS tools and helpers used across the project.
// Every global variable, function, mixin and placeholder should be put in here.
@import
  "abstracts/variables",
  "abstracts/functions/color",
  "abstracts/mixins/clearfix",
  "abstracts/mixins/webfont";

// 2. Vendors
// There is two ways to require vendor-files:
// - The `vendors`-folder can contain code from external libraries
// - You can import directly from npm/bower by referencing the approriate path
// If you have to overwrite sections of a vendor-file, use a `vendor-extensions`-folder.
@import
  // See: https://github.com/LukyVj/family.scss
  "node_modules/family.scss/source/src/family",
  // See: https://github.com/modularscale/modularscale-sass
  "node_modules/modularscale-sass/stylesheets/modularscale",
  // See: https://github.com/jonathantneal/sanitize.css
  "node_modules/sanitize.css/sanitize",
  // https://github.com/zellwk/mappy-breakpoints,
  "node_modules/mappy-breakpoints/mappy-breakpoints";

// 3. Base
// The `base`-folder holds the boilerplate code for the project.
// It containts typographic and global rules as well as animation-declarations.
@import
  "base/animations",
  "base/base",
  "base/typography";

// 4. Components
// Components are singular, composable abstractions. Examples of a component are buttons or data-tables.
// Components do one thing and one thing only and should be re-usable.
@import
  "components/feature-blocks",
  "components/our-mission";

// 5. Layout
// Layouts organize the main parts of the page. Examples are headers, navbars or forms.
@import
  "layout/article",
  "layout/aside",
  "layout/content-container",
  "layout/content-header",
  "layout/header",
  "layout/footer",
  "layout/main",
  "layout/page";

// 6. Pages
// The `pages`-folder contains page-specific styles that can't be fit into modules or partials.
@import
  "pages/home",
  "pages/work-landing";
